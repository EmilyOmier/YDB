;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;								;
; Copyright (c) 2020-2022 YottaDB LLC and/or its subsidiaries.	;
; All rights reserved.						;
;								;
;	This source code contains the intellectual property	;
;	of its copyright holder(s), and is made available	;
;	under a license.  If you do not know the terms of	;
;	the license, please stop and do not read further.	;
;								;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%YDBPROCSTUCKEXEC

; Usage: yottadb -run %YDBPROCSTUCKEXEC message waiting_pid blocking_pid count
; When invoked by a process using the ydb_procstuckexec (gtm_procstuckexec)
; environment variable provides a file with helpful information in the directory
; pointed to by $ydb_log, $gtm_log, $ydb_tmp, $gtm_tmp (whichever is first found to
; be defined, and /tmp if not specified. Using gdb, it captures and summarizes the
; state of the process blocking the process that invoked this program.
; See https://docs.yottadb.com/AdminOpsGuide/basicops.html#environment-variables
; for YottaDB environment variables. The program expects the command line to specify:
; - a message as to the problem that caused a process to invoke this program
; - the pid of the process invoking the script
; - the pid of the blocking process
; - optionally, the number of times to snap the state of the blocking process
;   (to judge whether it is stuck or actually attempting to do work).
; As this needs to execute as quickly as possible:
; - No error checking is done.
; - The DSE ALL DUMP ALL snapshot of database file headers is a JOB'd process
;   as DSE can wait when opening database files. This process does not wait for
;   the DSE process to complete.
; This program uses the global directory from $ydb_gbldir / $gtm_gbldir, which are
; provided by the parent process.

	new blockcmd,blockexe,blockpid,callpid,count,end,env,errfiledse,file,i
	new io,line,msg,okflag,outdir,outfile,outfiledse,procfsdir,prog,retcode
	view "unsetenv":"ydb_procstuckexec"	; Prevent JOB'd process from invoking %YDBPROCSTUCKEXEC
	view "unsetenv":"gtm_procstuckexec"
	set io=$io
	set msg=$zpiece($zcmdline," ",1)
	set callpid=$zpiece($zcmdline," ",2)
	set blockpid=$zpiece($zcmdline," ",3)
	set count=$select(4>$zlength($zcmdline," "):1,1:+$zpiece($zcmdline," ",4))
	set outdir=$ztrnlnm("ydb_tmp")
	set:'$zlength(outdir) outdir=$ztrnlnm("gtm_tmp")
	set:'$zlength(outdir) outdir=$ztrnlnm("ydb_log")
	set:'$zlength(outdir) outdir=$ztrnlnm("gtm_log")
	set:'$zlength(outdir) outdir="/tmp/"
	set:"/"'=$zextract(outdir,$zlength(outdir)) outdir=outdir_"/"
	set outfile=outdir_$text(+0)_"_"_$ztranslate($zdate($horolog,"YEARMMDD-2460SS"),"-","_")_"_"_msg_"_"_callpid_"_"_blockpid_"_"_count_"_"_$job
	set errfiledse=outfile_"_dse.err"
	set outfiledse=outfile_"_dse.out"
	set outfile=outfile_".out"
	if $zsyslog($text(+0)_" on pid "_blockpid_" by "_callpid_" output at "_outfile)
	open outfile:newversion use outfile
	set procfsdir="/proc/"_blockpid_"/"	; directory in /procfs with blocking pid info
	write "Invoked on ",blockpid," by ",callpid," for ",count,$select(1=count:"st",2=count:"nd",3=count:"rd",1:"th")," time; reason: ",msg,!
	write "--------------------",!
	; report command line of blocking pid
	set file=procfsdir_"cmdline",okflag=1
	open file:(readonly:exception="set okflag=0 goto cmd1")
cmd1	if okflag do
	. use file
	. read line	   ; read command line of blocking process
	. use outfile close file
	. write "Command line of process ",blockpid,!
	. write $zpiece(line,$zchar(0),1)
	. for i=2:1:$zlength(line,$zchar(0)) write " ",$zpiece(line,$zchar(0),i)
	else  write "Command line of process ",blockpid," inaccessible at ",file
	; report environment of blocking pid
	write !,"--------------------",!
	set file=procfsdir_"environ",okflag=1
	open file:(readonly:exception="set okflag=0 goto env1")
env1	if okflag do
	. use file
	. read line	   ; read environment of blocking process
	. use outfile close file
	. write "Environment of process ",blockpid,!
	. for i=1:1:$zlength(line,$zchar(0))-1 write $zpiece(line,$zchar(0),i),!
	else  write "Environment of process",blockpid," inaccessible at ",file,!
	write "--------------------",!
	write "Using gdb to get stack trace of blocking process.",!
	write "If the following fails check permissions, including any layered security modules.",!
	write "--------------------",!
	set prog="gdb "_procfsdir_"exe -pid "_blockpid_" -ex ""set width 0"" -ex ""set backtrace limit 100"" -ex ""info threads"" -ex ""backtrace"" -ex ""detach"" -ex ""quit"""
	open "pipe":(shell="/bin/sh":command=prog:readonly)::"pipe" use "pipe"
	for  read line quit:$zeof  use outfile write line,! use "pipe"
	use outfile close "pipe"
	write "--------------------",!
	write "Sending USR1 to ",blockpid,!
	; for releases through 1.28 use 10 for USR1; use signal name for later releases
	set retcode=$zsigproc(blockpid,$select(1.28<+$zpiece($zpiece($zyrelease," ",2),"r",2):"USR1",1:10))
	write "$ZSIGPROC() returned ",retcode,!
	write "--------------------",!
	write "JOB'ing process to acquire DSE ALL DUMP ALL output",!
	write "Note DSE startup can potentially be delayed.",!
	write "Output file is "_outfiledse,!
	write "Error file is "_errfiledse,!
	job @("dse:(output="""_outfiledse_""":error="""_errfiledse_""")")
	write "pid of jobbed process is ",$zjob,!
	write "--------------------",!
	zhalt retcode

dse	; Job'd process to capture output of DSE ALL DUMP ALL
	new io,key,line
	set io=$io
	open "pipe":(shell="/bin/sh":command="$ydb_dist/dse all -dump -all":stderr="dse_err":readonly)::"pipe" use "pipe"
	set key=$key
	use io
	write "pid of DSE or its parent is ",key,!
	write "Database file headers for regions from global directory ",$zgbldir,!
	use "dse_err"
	for  read line quit:$zeof  use io write line,! use "dse_err"
	use io close "pipe"
	quit
